{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/paul/Documents/Coding/agency-website/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import(\"@apollo/react-ssr\");\n\n              case 14:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 73\n                  },\n                  __self: this\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"https://agency-grapqhl-api.herokuapp.com/graphql\",\n      // Server URL (must be absolute)\n      credentials: \"same-origin\",\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/home/paul/Documents/Coding/agency-website/lib/apollo.tsx"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React, { ReactComponentElement } from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\ninterface Props {\n\tapolloClient: ApolloClient<NormalizedCacheObject> | null;\n\tapolloState: any;\n}\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }: Props) => {\n\t\tconst client = apolloClient || initApolloClient(apolloState);\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\t// Set the correct displayName in development\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst displayName =\n\t\t\tPageComponent.displayName || PageComponent.name || \"Component\";\n\n\t\tif (displayName === \"App\") {\n\t\t\tconsole.warn(\"This withApollo HOC only works with PageComponents.\");\n\t\t}\n\n\t\tWithApollo.displayName = `withApollo(${displayName})`;\n\t}\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async (ctx: any) => {\n\t\t\tconst { AppTree } = ctx;\n\n\t\t\t// Initialize ApolloClient, add it to the ctx object so\n\t\t\t// we can use it in `PageComponent.getInitialProp`.\n\n\t\t\tconst apolloClient = (ctx.apolloClient = initApolloClient());\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(ctx);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === \"undefined\") {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (ctx.res && ctx.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tconst { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={{\n\t\t\t\t\t\t\t\t\t...pageProps,\n\t\t\t\t\t\t\t\t\tapolloClient\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tconsole.error(\"Error while running `getDataFromTree`\", error);\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState\n\t\t\t};\n\t\t};\n\t}\n\n\treturn WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState?: any) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\tif (typeof window === \"undefined\") {\n\t\treturn createApolloClient(initialState);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\tapolloClient = createApolloClient(initialState);\n\t}\n\n\treturn apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n\t// Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\treturn new ApolloClient({\n\t\tssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n\t\tlink: new HttpLink({\n\t\t\turi: \"https://agency-grapqhl-api.herokuapp.com/graphql\", // Server URL (must be absolute)\n\t\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\t\tfetch\n\t\t}),\n\t\tcache: new InMemoryCache().restore(initialState)\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}