{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/paul/Documents/Coding/agency-website/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"https://agency-grapqhl-api.herokuapp.com/graphql\",\n      // Server URL (must be absolute)\n      credentials: \"same-origin\",\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/home/paul/Documents/Coding/agency-website/lib/apollo.tsx"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React, { ReactComponentElement } from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\ninterface Props {\n\tapolloClient: ApolloClient<NormalizedCacheObject> | null;\n\tapolloState: any;\n}\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }: Props) => {\n\t\tconst client = apolloClient || initApolloClient(apolloState);\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\t// Set the correct displayName in development\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst displayName =\n\t\t\tPageComponent.displayName || PageComponent.name || \"Component\";\n\n\t\tif (displayName === \"App\") {\n\t\t\tconsole.warn(\"This withApollo HOC only works with PageComponents.\");\n\t\t}\n\n\t\tWithApollo.displayName = `withApollo(${displayName})`;\n\t}\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async (ctx: any) => {\n\t\t\tconst { AppTree } = ctx;\n\n\t\t\t// Initialize ApolloClient, add it to the ctx object so\n\t\t\t// we can use it in `PageComponent.getInitialProp`.\n\n\t\t\tconst apolloClient = (ctx.apolloClient = initApolloClient());\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(ctx);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === \"undefined\") {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (ctx.res && ctx.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tconst { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={{\n\t\t\t\t\t\t\t\t\t...pageProps,\n\t\t\t\t\t\t\t\t\tapolloClient\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tconsole.error(\"Error while running `getDataFromTree`\", error);\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState\n\t\t\t};\n\t\t};\n\t}\n\n\treturn WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState?: any) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\tif (typeof window === \"undefined\") {\n\t\treturn createApolloClient(initialState);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\tapolloClient = createApolloClient(initialState);\n\t}\n\n\treturn apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n\t// Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\treturn new ApolloClient({\n\t\tssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n\t\tlink: new HttpLink({\n\t\t\turi: \"https://agency-grapqhl-api.herokuapp.com/graphql\", // Server URL (must be absolute)\n\t\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\t\tfetch\n\t\t}),\n\t\tcache: new InMemoryCache().restore(initialState)\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}